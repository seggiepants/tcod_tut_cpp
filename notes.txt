tutorial: https://www.roguebasin.com/index.php?title=Complete_roguelike_tutorial_using_C%2B%2B_and_libtcod_-_part_1:_setting_up
getting started docs: https://libtcod.readthedocs.io/en/latest/guides/getting-started.html
github: https://github.com/libtcod/libtcod

suggests vcpkg and cmake.

vcpkg: https://github.com/microsoft/vcpkg
cmake: https://cmake.org/

vcpkg: jump to getting started then unix

# linux
wants a sub-module so lets go back to the libtcod c++ tutorial and set that up.

Oh look a template already setup, lets use that (https://github.com/HexDecimal/libtcod-vcpkg-template).
git submodule update --init to grab vcpkg... takes a while to clone
a very long time, lets update CMakeLists.txt while waiting

changed the name and after failing a few times, the submodule init worked (had to login for some reason to a key chain thing)
cmake CMakeList.txt and now it is upgrading cmake -- grumble.

looks like it is now getting SDL2 (I thought I had that)
looks like I can pass in a define for emscripten, so that sounds nice.
https://github.com/HexDecimal/libtcod-vcpkg-template

More dependencies
sudo apt install libx11-dev libxft-dev libxext-dev
sudo apt install libwayland-dev libxkbcommon-dev libegl1-mesa-dev
sudo apt install libibus-1.0-dev

slow but we got there in the end. Changed the window title kept the rest and I now have an executable that says 'Hello World'

Now back to the tutorial, lets go back to the tutorial, and make the first program. A lot of stuff like include file already there from the template, plus a lot more the tutorial doesn't cover.
first off init_root is deprecated, shouldn't be used and doesn't work with emscripten.
looks like we are using SDL2 event handling instead of tcod. Will probably stay with that.
Can't use TCODConsole::isWindowClosed() use SDL2 it says.
Looks like we have a global console object instead of calling library function commands
g_context.present(g_console); instead of TCODConsole::flush(); with a global context and console.
we have print but no put_char lets try at. Have to add .ch at the end to get to the char, but it works and eventually 
I finish part 1: setting up. I also added [ESCAPE] to quit and you can use cursors or wasd to move. 

Did some looking not really seeing the map generation stuff I wanted, at least not in the readthedocs.io main sidebar. I do see a bsp.hpp file in the full api list of files.

Man alive it was painful trying to get github let me push to it. SSH vs HTTPS and a new SSH key. Misery all around.

-- 06 FEB 2024
-- Part 2 Map and Actors

Oh look I found a newer version of the tutorial this should solve everything right?
https://www.roguebasin.com/index.php?title=Complete_roguelike_tutorial_using_modern_C%2B%2B_and_libtcod
Nope, abandonded after one paragraph. Ok continue with the old one then.

lets start putting things on branches in git. I swear I used to do this a better way.
git branch 02_Map_and_Actors
git switch 02_Map_and_Actors

I also found a site with the python version of the tutorials (http://www.rogueliketutorials.com/) may want to check against it later to see if I am missing stuff.

I prefer .h or .hpp, but I will stick with the tutorial and use .hpp for this project

Needed to hack up the old main and bring over the template initialization due to deprecation. Quite a bit more code than before. Puzzled over if I should pass in argc, argv or the whole parameter block. Decided the parameters belonged more in the engine and passed in the arguments. Moved get data dir into engine too and added a isRunning flag. Compiled and .... TCODList is deprecated. Let me go swap it for a generic stl list groan.

ok, works as desired. Decided to take a screen shot for the readme. Speaking of which I should update that.

-- Part 03 Dungeon Building 
I decided I didn't want to use screen grabbers for the next screen shot. Found a nice screenshot function in the library coded up something to save a screenshot with increasing counter when you hit F10. Compile... and .... depreacated :(
I found TCOD_context_save_screenshot, but it uses the wrong context.

OK, does the context I am using have a screenshot function? Yes and it takes a std::filesystem::path too which I was using lets try that. Segmentation fault, core dumped() :(

Learned you can do
cmake -DCMAKE_BUILD_TYPE=Debug CMakeLists.txt
cmake -DCMAKE_BUILD_TYPE=Release CMakeLists.txt

changed to debug attached with gdb and it is in code that isn't mine :(

Thread 1 "tcod_tut_cpp" received signal SIGSEGV, Segmentation fault.
0x000055555586c182 in getPixelColorRGBA8 (r=0x7fffffffd638 "", g=0x7fffffffd63a "", b=0x7fffffffd63c "", a=0x7fffffffd63e "", in=0x0, i=0, mode=0x7fffffffde98) at /home/sgray/Documents/code/tcod_tut_cpp/vcpkg/buildtrees/lodepng/src/dcd7a6a84a-1b95b8ca64.clean/lodepng.c:3311

nope changing to .bmp from .png does nothing, dies same place doesn't detect file type or anything.
Stole some screenshot SDL2 code from Stack Overflow, that works but only saves as .BMP.  Without SDL_Image I think that is the best I can do. Anyway table this for now. Well one more thing, make sure it is not enabled in emscripten mode.

Trying to keep things clean so when I got an unused parameter warning, for the userdata in the bspListener I found out you can prepend __attribute__((unused)) to it to silence the error. Learn something new every day. Other than my foray into trying to get a better screenshot system. This went pretty smooth, and mostly as-is. I think there is a TCOD_Random vs TCODRandom error in the original text. I also used std::swap to try to be more modern c++ ish.

Spoke too soon, another core dump, is it the swap? Not this time: engine->player->x = (x1 + x2) / 2; I did have to switch from engine. to engine->, maybe the intellisense led me the wrong way. No compiler agrees with intellisense. I thought maybe I had map before player and a null pointer but it looks ok. Gdb says engine is a null pointer. Pointer must not be valid until after the constructor returns. I can either switch it back to a non-pointer object and remove the argc, argv parameters or move map creation out of the constructor. I don't really like either, but I think I will go with the prior. Closer to the original code. Now I get unused argc, argv, guess I will remove them. Looks like I didn't return a value either, add that, maybe that was the windows build problem. Almost working, I just don't have corridors. Is it the swap? Nope. It was digging doing a < instead of a <=.

By the way first split recursive in the tutorial is passing max when it should be min. Also rooms are reaching the screen edges when it shouldn't be. Core dump on exit that is not good. Got it once in gdb not in my thread can no longer reproduce :(

I think I got the bounds fixed. Passing in the room min size is too small when iterating min room size is where the bsp splitting stops but is also used to set the lower bound of the room when visiting. You can't have both the min size and a border. So I added two to the min room size for the splitting and use the normal min room size for the create room lower bound. Could get out of bounds numbers otherwise. The max swapped version in the tutorial wouldn't have the problem since it stopped much earlier.

-- 07 FEB 2024
-- Part 04 Field of View

I changed my mind. I decided to move the engine initialization to a separate method, brought back argc,argv and passed them in. Hoping that fixes the SDLmain problem on Windows. Maybe, maybe not but at least the signature of main might match expectations better. Also I just removed the ScreenShot function altogether, it was causing build problems and wasn't really good.

My tryMove function just saved me from setting computeFov = true four times, huzzah! It also only does it if you actually move. I moved computFov = true from the Engine constructor to the init call. I don't want to compute it until we have a map to use. I think my code for setting the tile background color after grabbing the tile reference first is nicer too. I also don't like if/else trees that don't do all the cases so I plot a black square if not explored.

-- Part 05 Preparing for Combat
-- Tried getting emscripten to build, but it isn't working. I think my local emscripten setup is just bad. Will try again on another machine at some point.

canWalk sounds like the tryMove function I already added. By the way in the previous branch I had to fix the setWall method I wonder if I was supposed to remove it when we added the dig method. Turns out tryMove will be replaced with moveOrAttack(); The change makes my computeFov engine flag no longer necessary too.

I have been thinking all of the rooms are pretty much the same size. The max room size is probably really the min bsp node size. I am going to rename that and put it back in instead of just adding 2 to each. Actually I will make it the prior constant + difference. I guess that's better. I did make it + 5 or 11 instead of 12 just so it is a little less aligned to grid.

TCODColor::desaturatedGreen and darkerGreen are deprecated. Against recommendations went with a std::string for the Actor name. I can now change it if desired. Don't like the fixed sized arrays for name.

Pretty sure we need to reset the game status back to IDLE after running the actor update functions.

I used std::string and it looks like MSVC hates that so lets see if the windows build fails now. Otherwise things look like they are working for this part of the tutorial.

-- 08 FEB 2024
-- Part 06 Going Berserk!
I like header guards so I am skipping the one header file to rule them all part. In fact I have been adding those since the beginning.

It looks like I may have missed a bit in the code checking last time, not enough to cause a build error but it shouldn't have been working (but it was when I tested). Not sure but git marks it as a change. Maybe I did a successful error.

Changed std::string to std::string* just seems more reliable. Added destructors to delete them too.

Not so sure of the owner stuff on the Destructible classes it is confusing. It looks like we are attacked and then the owner dies? I broke the Monster and Player Destructible classes into their own files.

On the Attacker::attack method I saved damage in a variable so we didn't compute it multiple times. For Destructible, Owner is going to be the one taking the damage not dishing it. The owner is the one who owns the Destructible object, should have probably changed that variable's name, seems like the destructible object should have a pointer to the actor it belongs to or you should go through the actor to use the destructible object and it passes in its this pointer. 

This is a long one, I don't like things to be in a non-compilable state for so long with dangling references that haven't been defined yet. Would have preferred to stub them out first.

Had to upgrad Map::canWalk from protected to public. I didn't think it needed to be public last part. Lots more public things than I would like normally if I am being honest.

I misread the IDLE state last time. Should always start the engine update by setting status to idle. I think my extra fix last time was patching over that omission.

Lots of build errors, that forward reference got me. I ended up putting class Actor; in the header and #include "Actor.hpp" in the cpp file to get rid of that. I accidentally left MonsterDestructible incomplete which caused cryptic linker errors too. Then when I try to play, I have 0/30 life and the player won't respond to input. Groan. Must have missed a line. A missing break messed up the keyboard handling, and a bad switch statement for the engine too. I never initialized HP was the 0/30 problem. Now I am noticing I am printing pointers instead of names for attack messages. Ok, working better now after adding ->c_str() to my std::string variables when printing (is that the correct way). 

Now the orcs and trolls seem to run away when I try to attack or at least when I try to get close to them. Figured it out, the orc moving is only when you normalize the distance vector, I had it try to move whenever it could and attack if movement failed. Moved the chase stuff into the normalize condition and things seem to be working now.

That was a long one, but it is an actual game at this point. There is a world, enemies, and you can lose. You can't really win, but close enough. 

09 FEB 2024
-- Part 07 The GUI
This has been a bit of a slog, not even to the message log and lots of deprecation problems. 
By the way can we make up our mind on RGB, vs RGBA I seem to have an mish-mash of both, and I want to stick to just one.

I knew the console was coming but I needed to add get_height/get_width inline calls so I could tell how far to move things around without duplicating constants/magic numbers.

TCOD_Console, well sounds like you really need tcod::Console which you can cast to a TCOD_Console. That's great except it doesn't seem to work if you have a tcod::Console* and want a TCOD_Console*. In fact it causes a segmentation fault. I had to make a temporary TCOD_Console variable from *con (the tcod::Console*) (passing *con was working for other calls) then take the address of that in the print call. Which can't be printEx, nope deprecated. Switch it to TCOD_console_print. Nope no good have to use TCOD_console_printf_ex. Arg. 

Lets not forget setDefaultBackground is deprecated. In Gui::render I worked around it by calling clear with a tile with the desired background. Other calls needed to be deleted then pass the colors into the rectangle drawing call instead. Of course the rect command is also deprecated, use tcod::draw_rect which has a different parameter list.

I am starting to think this is where any other people trying to get the tutorial to work stopped. That is a lot of deprecation and confusion for such a tiny bit of code. Anyway, I got it working onto the message log. By the way trying to catch a segmentation fault in gdb is annoying. Looks like I was back in release mode for unknown reasons.

Looking through the code I found a commented out print line which had better syntax. use con->get() to get the console pointer. Oy I feel dumb. It is far less hack-ish at least.

So I am getting tired once again with TCOD_ColorRGB vs TCOD_ColorRGBA which of course are both different than TCODColor in the tutorial. At the every end I finally decided to put all the color constants in one place. The RGB colors are lower case, and the RGBA colors are upper case. Tile need RGBA most other things need just RGB. Sometimes the Highlander is right, there can be only one! That stuff needs a cleanup.

Outside of that the Messages required normal changes, TCODList is deprecated so a STL list it is. Instead of char* I also used STL strings (although you pass in const char* because I am dumb that way).

Despite trying to keep things new C++ style, in the the message function I broke down and used c-isms like vsprintf and just a plain char array. Although once I got to the renderMouseLook function the char array caused a crash. I forgot to limit the message to just things at the mouse location and blew through the array. Whoops! Changing it to a std::string helped me find that problem.

Speaking of MouseLook, I wanted to use the TCOD mouse stuff. First I looked up how to do it in SDL2. Then as I was about to call it good, I remembered something. That is pixel location versus character location. I didn't want to try to compute it so I tired the TCOD calls and was promptly told it was .... deprecated. So I computed it anyway, and had to cache the tile width and height in the engine to compute it. Seems to work... it also seems TCOD should have something for mouse to character location. Maybe they do and I just didn't see it.

I should probably add in extra SDL2 libraries for sound effects and image handling at some point. Might help get that screenshot function working. 

Why was such a small part soooo long?




